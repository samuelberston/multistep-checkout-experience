const express = require('express');

const app = express();
const port = 3000;

const path = require('path');

const db = require('../db/connection.js');

app.use(express.static('client'));

const logger = (request, response, next) => {
  console.log(`Receiving request to ${request.url} with method ${request.method}`);
  next();
};

app.use('/', logger);
app.post('/users', function (req, res) {
  console.log('req: ', req);
  console.log('res: ', res); // const query = `INSERT INTO users (name, email, password) VALUES ('${req.body.name}', '${req.body.email}', '${req.body.password}')`;
  // db.query(query, (err, result) => {
  //   if (err) { throw err; }
  //   console.log(result);
  // })
});
app.post('/shipping', function (req, res) {
  const query = `INSERT INTO shippingInfo (address1, address2, city, state, zipCode) VALUES ('${req.body.address1}', '${req.body.address2}', '${req.body.city}', '${req.body.state}', ${req.body.zip})`;
  db.query(query, (err, result) => {
    if (err) {
      throw err;
    }

    console.log(result);
  });
});
app.listen(port, () => {
  console.log(`Listening on ${port}`);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9zZXJ2ZXIuanMiXSwibmFtZXMiOlsiZXhwcmVzcyIsInJlcXVpcmUiLCJhcHAiLCJwb3J0IiwicGF0aCIsImRiIiwidXNlIiwic3RhdGljIiwibG9nZ2VyIiwicmVxdWVzdCIsInJlc3BvbnNlIiwibmV4dCIsImNvbnNvbGUiLCJsb2ciLCJ1cmwiLCJtZXRob2QiLCJwb3N0IiwicmVxIiwicmVzIiwicXVlcnkiLCJib2R5IiwiYWRkcmVzczEiLCJhZGRyZXNzMiIsImNpdHkiLCJzdGF0ZSIsInppcCIsImVyciIsInJlc3VsdCIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdGLE9BQU8sRUFBbkI7QUFDQSxNQUFNRyxJQUFJLEdBQUcsSUFBYjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdILE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUVBLE1BQU1JLEVBQUUsR0FBR0osT0FBTyxDQUFDLHFCQUFELENBQWxCOztBQUVBQyxHQUFHLENBQUNJLEdBQUosQ0FBUU4sT0FBTyxDQUFDTyxNQUFSLENBQWUsUUFBZixDQUFSOztBQUVBLE1BQU1DLE1BQU0sR0FBRyxDQUFDQyxPQUFELEVBQVVDLFFBQVYsRUFBb0JDLElBQXBCLEtBQTZCO0FBQzFDQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSx3QkFBdUJKLE9BQU8sQ0FBQ0ssR0FBSSxnQkFBZUwsT0FBTyxDQUFDTSxNQUFPLEVBQTlFO0FBQ0FKLEVBQUFBLElBQUk7QUFDTCxDQUhEOztBQUtBVCxHQUFHLENBQUNJLEdBQUosQ0FBUSxHQUFSLEVBQWFFLE1BQWI7QUFHQU4sR0FBRyxDQUFDYyxJQUFKLENBQVMsUUFBVCxFQUNFLFVBQVNDLEdBQVQsRUFBY0MsR0FBZCxFQUFtQjtBQUNqQk4sRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFxQkksR0FBckI7QUFDQUwsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFxQkssR0FBckIsRUFGaUIsQ0FHakI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNILENBVkQ7QUFZQWhCLEdBQUcsQ0FBQ2MsSUFBSixDQUFTLFdBQVQsRUFBc0IsVUFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3ZDLFFBQU1DLEtBQUssR0FBSSxnRkFBK0VGLEdBQUcsQ0FBQ0csSUFBSixDQUFTQyxRQUFTLE9BQU1KLEdBQUcsQ0FBQ0csSUFBSixDQUFTRSxRQUFTLE9BQU1MLEdBQUcsQ0FBQ0csSUFBSixDQUFTRyxJQUFLLE9BQU1OLEdBQUcsQ0FBQ0csSUFBSixDQUFTSSxLQUFNLE1BQUtQLEdBQUcsQ0FBQ0csSUFBSixDQUFTSyxHQUFJLEdBQW5NO0FBQ0FwQixFQUFBQSxFQUFFLENBQUNjLEtBQUgsQ0FBU0EsS0FBVCxFQUFnQixDQUFDTyxHQUFELEVBQU1DLE1BQU4sS0FBaUI7QUFDL0IsUUFBR0QsR0FBSCxFQUFRO0FBQUUsWUFBTUEsR0FBTjtBQUFZOztBQUN0QmQsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVljLE1BQVo7QUFDRCxHQUhEO0FBSUQsQ0FORDtBQVFBekIsR0FBRyxDQUFDMEIsTUFBSixDQUFXekIsSUFBWCxFQUFpQixNQUFNO0FBQ3JCUyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBYSxnQkFBZVYsSUFBSyxFQUFqQztBQUNELENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHByZXNzID0gcmVxdWlyZSgnZXhwcmVzcycpO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuY29uc3QgcG9ydCA9IDMwMDA7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCBkYiA9IHJlcXVpcmUoJy4uL2RiL2Nvbm5lY3Rpb24uanMnKVxuXG5hcHAudXNlKGV4cHJlc3Muc3RhdGljKCdjbGllbnQnKSk7XG5cbmNvbnN0IGxvZ2dlciA9IChyZXF1ZXN0LCByZXNwb25zZSwgbmV4dCkgPT4ge1xuICBjb25zb2xlLmxvZyhgUmVjZWl2aW5nIHJlcXVlc3QgdG8gJHtyZXF1ZXN0LnVybH0gd2l0aCBtZXRob2QgJHtyZXF1ZXN0Lm1ldGhvZH1gKVxuICBuZXh0KCk7XG59XG5cbmFwcC51c2UoJy8nLCBsb2dnZXIpO1xuXG5cbmFwcC5wb3N0KCcvdXNlcnMnLFxuICBmdW5jdGlvbihyZXEsIHJlcykge1xuICAgIGNvbnNvbGUubG9nKCdyZXE6ICcsIHJlcSk7XG4gICAgY29uc29sZS5sb2coJ3JlczogJywgcmVzKTtcbiAgICAvLyBjb25zdCBxdWVyeSA9IGBJTlNFUlQgSU5UTyB1c2VycyAobmFtZSwgZW1haWwsIHBhc3N3b3JkKSBWQUxVRVMgKCcke3JlcS5ib2R5Lm5hbWV9JywgJyR7cmVxLmJvZHkuZW1haWx9JywgJyR7cmVxLmJvZHkucGFzc3dvcmR9JylgO1xuXG4gICAgLy8gZGIucXVlcnkocXVlcnksIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgIC8vICAgaWYgKGVycikgeyB0aHJvdyBlcnI7IH1cbiAgICAvLyAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgLy8gfSlcbn0pXG5cbmFwcC5wb3N0KCcvc2hpcHBpbmcnLCBmdW5jdGlvbihyZXEsIHJlcykge1xuICBjb25zdCBxdWVyeSA9IGBJTlNFUlQgSU5UTyBzaGlwcGluZ0luZm8gKGFkZHJlc3MxLCBhZGRyZXNzMiwgY2l0eSwgc3RhdGUsIHppcENvZGUpIFZBTFVFUyAoJyR7cmVxLmJvZHkuYWRkcmVzczF9JywgJyR7cmVxLmJvZHkuYWRkcmVzczJ9JywgJyR7cmVxLmJvZHkuY2l0eX0nLCAnJHtyZXEuYm9keS5zdGF0ZX0nLCAke3JlcS5ib2R5LnppcH0pYFxuICBkYi5xdWVyeShxdWVyeSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgaWYoZXJyKSB7IHRocm93IGVycjsgfVxuICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gIH0pXG59KVxuXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcbiAgY29uc29sZS5sb2coYExpc3RlbmluZyBvbiAke3BvcnR9YClcbn0pIl19